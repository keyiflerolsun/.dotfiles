{"created_by":"Tampermonkey","version":"1","scripts":[{"name":"R10 AdFck","options":{"check_for_updates":true,"comment":null,"compat_foreach":false,"compat_metadata":false,"compat_powerful_this":null,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":[],"orig_matches":["*://www.r10.net/*"],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"sandbox":null,"tab_types":null,"unwrap":null},"storage":{"ts":1671066989332,"data":{}},"enabled":true,"position":1,"file_url":"https://greasyfork.org/scripts/442192-r10-adfck/code/R10%20AdFck.user.js","uuid":"3d544001-f7bb-4ab4-b72b-5763d59126c7","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBSMTAgQWRGY2sKLy8gQG5hbWVzcGFjZSAgICBodHRwczovL0tla2lrQWthZGVtaS5vcmcvS2FodmUKLy8gQGRlc2NyaXB0aW9uICBSMTAuTmV0IFJla2xhbSBFbmdlbGxleWljaQovLyBAY29weXJpZ2h0ICAgIDIwMjIsIGtleWlmbGVyb2xzdW4sIGh0dHBzOi8vdC5tZS9LZWtpa0FrYWRlbWkKLy8gQHZlcnNpb24gICAgICAxLjMxCi8vIEBsaWNlbnNlICAgICAgR1BMdjMKLy8gQGF1dGhvciAgICAgICBAS2VraWtBa2FkZW1pCi8vIEBtYXRjaCAgICAgICAgKjovL3d3dy5yMTAubmV0LyoKLy8gQGljb24gICAgICAgICBodHRwczovL3d3dy5nb29nbGUuY29tL3MyL2Zhdmljb25zP3N6PTY0JmRvbWFpbj1yMTAubmV0Ci8vIEBncmFudCAgICAgICAgbm9uZQovLyBAcmVxdWlyZSAgICAgIGh0dHA6Ly9hamF4Lmdvb2dsZWFwaXMuY29tL2FqYXgvbGlicy9qcXVlcnkvMy42LjAvanF1ZXJ5Lm1pbi5qcwovLyA9PS9Vc2VyU2NyaXB0PT0KCgovLyAhIEVsZW1hbiBWYXJzYSBTaWwKZnVuY3Rpb24gaWNpbmRlbl9nZWMoc2VjaWNpKSB7CiAgICBsZXQgZWxlbWFuID0galF1ZXJ5KHNlY2ljaSkKCiAgICBpZiAoZWxlbWFuLmxlbmd0aCkgewogICAgICAgIGVsZW1hblswXS5yZW1vdmUoKQogICAgfQoKICAgIHJldHVybiBqUXVlcnkoc2VjaWNpKQp9CgovLyAhIFhQYXRoIFNlw6dpY2kKZnVuY3Rpb24geF9wYXRoKFNUUl9YUEFUSCkgewogICAgdmFyIHhyZXN1bHQgPSBkb2N1bWVudC5ldmFsdWF0ZShTVFJfWFBBVEgsIGRvY3VtZW50LCBudWxsLCBYUGF0aFJlc3VsdC5BTllfVFlQRSwgbnVsbCk7CiAgICB2YXIgeG5vZGVzID0gW107CiAgICB2YXIgeHJlczsKICAgIHdoaWxlICh4cmVzID0geHJlc3VsdC5pdGVyYXRlTmV4dCgpKSB7CiAgICAgICAgeG5vZGVzLnB1c2goeHJlcyk7CiAgICB9CgogICAgcmV0dXJuIHhub2RlczsKfQoKLy8gISBYUEFUSCBWYXJzYSBTaWwKZnVuY3Rpb24geF9kZWwoc2VjaWNpKSB7CiAgICBsZXQgZWxlbWFuID0geF9wYXRoKHNlY2ljaSkKCiAgICBpZiAoZWxlbWFuLmxlbmd0aCkgewogICAgICAgIGVsZW1hblswXS5yZW1vdmUoKQogICAgfQoKICAgIHJldHVybiB4X3BhdGgoc2VjaWNpKQp9CgovLyAhIExpbmsgWcO2bmxlbmRpcm1lIMSwcHRhbGkKZnVuY3Rpb24geW9ubGVuZGlybWVfc2lsKCkgewogICAgbGV0IF95b25sZW5kaXIgPSAnaHR0cHM6Ly93d3cucjEwLm5ldC95b25sZW5kaXIvP2FkcmVzPScKICAgIGpRdWVyeShgYVtocmVmXj0iJHtfeW9ubGVuZGlyfSJdYCkuZWFjaChmdW5jdGlvbiAoKSB7CiAgICAgICAgdGhpcy5ocmVmID0gZGVjb2RlVVJJQ29tcG9uZW50KHRoaXMuaHJlZi5yZXBsYWNlKF95b25sZW5kaXIsICIiKS5zcGxpdCgnJnRva2VuJylbMF0pCiAgICB9KQp9CgoKLy8gKiBLYXluYWsgS29kIFnDvGtsZW5pbmNlCmpRdWVyeShkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24gKCkgewoKICAgIC8vICEgw5xzdHRla2kgUmVrbGFtIFNpbAogICAgaWNpbmRlbl9nZWMoJ3NlY3Rpb246Y29udGFpbnMoInRvcGJhciIpJykKCiAgICAvLyAhIFNvbCBUYXJhZnRha2kgUmVrbGFtxLEgU2lsCiAgICBpY2luZGVuX2dlYygnLmhlYWQ6Y29udGFpbnMoIlJla2xhbSIpJykKICAgIGpRdWVyeSgnbWFpbicpLmNzcygncGFkZGluZy1sZWZ0JywgMCkKCiAgICAvLyAhIEhlZGVmIExpbmtsZXJpbiBSZWtsYW1sYXLEsW7EsSBTaWwKICAgIGljaW5kZW5fZ2VjKCdhW2hyZWYqPSJqZXR0ZWtub2xvamkiXScpCiAgICBpY2luZGVuX2dlYygnYVtocmVmKj0idGljaW1heCJdJykKICAgIGljaW5kZW5fZ2VjKCdhW2hyZWYqPSJpa2FzLmNvbSJdJykKICAgIGljaW5kZW5fZ2VjKCdhW2hyZWYqPSIzNDQ5NDA5LWlrYXMtZS10aWNhcmV0Il0nKQoKICAgIC8vICEgS2F0ZWdvcmkgxLDDp2kgU3BvbnNvcmx1CiAgICBpY2luZGVuX2dlYygnYVtyZWwqPSJzcG9uc29yZWQiXScpCgogICAgLy8gISBCbG9nIFJla2xhbSBTaWwKICAgIGljaW5kZW5fZ2VjKCdkaXZbY2xhc3M9ImJsb2dwb3N0cyJdJykKCiAgICAvLyAhIExpbmsgWcO2bmxlbmRpcm1lIMSwcHRhbGkKICAgIHlvbmxlbmRpcm1lX3NpbCgpCgogICAgLy8gISBCbG9nIFNwb25zb3JsdQogICAgeF9kZWwoIi8vc3Bhbltjb250YWlucyh0ZXh0KCksICdTUE9OU09STFUnKV0vYW5jZXN0b3I6OmRpdltjb250YWlucyhAY2xhc3MsICdwb3N0JyldIikKCn0pCgoKLy8gKiBTYXlmYSBZw7xrbGVuaW5jZQpqUXVlcnkod2luZG93KS5vbigibG9hZCIsIGZ1bmN0aW9uICgpIHsKCiAgICAvLyAhIFBNIEFsYW7EsSBGaXgKICAgIGlmICh3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUgPT0gJy9wcml2YXRlLnBocCcpIHsKICAgICAgICBqUXVlcnkoJ2Rpdi5jb252ZXJzYXRpb24nKVswXS5zdHlsZS53aWR0aCA9IG51bGwKICAgICAgICBqUXVlcnkoJ2Rpdi5jb252ZXJzYXRpb24nKVswXS5zdHlsZS5oZWlnaHQgPSBudWxsCiAgICAgICAgalF1ZXJ5KCdkaXYuY29udmVyc2F0aW9uIGRpdicpWzBdLnN0eWxlLndpZHRoID0gbnVsbAogICAgICAgIGpRdWVyeSgnZGl2LmNvbnZlcnNhdGlvbiBkaXYgZGl2JylbMF0uc3R5bGUud2lkdGggPSBudWxsCiAgICB9Cgp9KQoKCgovLyAqIEhlciBTYW5peWUKZnVuY3Rpb24ga29udHJvbEV0KCkgewoKICAgIC8vICEgS2F0ZWdvcmkgU3BvbnNvciBSZWtsYW0KICAgIGpRdWVyeSgnbGknKS5maWx0ZXIoZnVuY3Rpb24gKCkgewogICAgICAgIHJldHVybiB0aGlzLmlkLm1hdGNoKC9zcG9uc29yUmVrbGFtLykKICAgIH0pLnJlbW92ZSgpCgoKICAgIC8vICogVVJMIERlxJ9pxZ9pbmNlCiAgICBpZiAod2luZG93LmxvY2F0aW9uLmhyZWYgIT0gZWxkZWtpVVJMKSB7CgogICAgICAgIC8vICEgTGluayBZw7ZubGVuZGlybWUgxLBwdGFsaQogICAgICAgIHlvbmxlbmRpcm1lX3NpbCgpCgogICAgICAgIGVsZGVraVVSTCA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmCiAgICB9Cn0KCnZhciBlbGRla2lVUkwgPSB3aW5kb3cubG9jYXRpb24uaHJlZgpzZXRJbnRlcnZhbChrb250cm9sRXQsIDEwMDAp","requires":[{"meta":{"name":"jquery.min.js","url":"http://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js","ts":1671066989328,"mimetype":"text/javascript"},"source":""}]},{"name":"YouTube™ Multi Downloader 🚀💯 - yt1s.com (MP3, FHD, MP4, HD, SD, 3GP / NO ADS 🚫)","options":{"check_for_updates":true,"comment":null,"compat_foreach":false,"compat_metadata":false,"compat_powerful_this":null,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":[],"orig_matches":["*://*.youtube.com/*"],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"sandbox":null,"tab_types":null,"unwrap":null},"storage":{"ts":1671066989332,"data":{}},"enabled":true,"position":2,"file_url":"https://greasyfork.org/scripts/34613-youtube-multi-downloader-yt1s-com-mp3-fhd-mp4-hd-sd-3gp-no-ads/code/YouTube%E2%84%A2%20Multi%20Downloader%20%F0%9F%9A%80%F0%9F%92%AF%20-%20yt1scom%20(MP3,%20FHD,%20MP4,%20HD,%20SD,%203GP%20%20NO%20ADS%20%F0%9F%9A%AB).user.js","uuid":"4885dfee-70c7-48de-b5af-1406ae1d4b71","source":""},{"name":"AdsBypasser","options":{"check_for_updates":true,"comment":null,"compat_foreach":false,"compat_metadata":false,"compat_powerful_this":null,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":["*"],"orig_excludes":[],"orig_includes":["http://*","https://*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-start","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"sandbox":null,"tab_types":null,"unwrap":null},"storage":{"ts":1671066989336,"data":{"version":"n3"}},"enabled":true,"position":3,"file_url":"https://greasyfork.org/scripts/4881-adsbypasser/code/AdsBypasser.user.js","uuid":"03b66547-fc45-4e3f-bbcc-611c1d7d172b","source":"","resources":[{"meta":{"name":"align_center.css","url":"https://raw.githubusercontent.com/adsbypasser/adsbypasser/v5.73.0/css/align_center.css","ts":1671066989333,"mimetype":"text/css"},"source":"aHRtbCB7CiAgaGVpZ2h0OiAxMDAlOwp9Cgpib2R5IHsKICBoZWlnaHQ6IDEwMCU7CiAgbWFyZ2luOiAwOwp9CgojYWRzYnlwYXNzZXItd3JhcHBlciB7CiAgd2lkdGg6IDEwMCU7CiAgaGVpZ2h0OiAxMDAlOwogIHBvc2l0aW9uOiByZWxhdGl2ZTsKICB0ZXh0LWFsaWduOiBjZW50ZXI7Cn0KCiNhZHNieXBhc3Nlci1pbWFnZSB7CiAgbWFyZ2luOiBhdXRvOwogIHRvcDogMDsKICBib3R0b206IDA7CiAgbGVmdDogMDsKICByaWdodDogMDsKfQoKLyogdmltOiBzZXQgdHM9MiBzdHM9MiBzdz0yIGV0IDogKi8KLyogc3VibGltZTogdGFiX3NpemUgMjsgdHJhbnNsYXRlX3RhYnNfdG9fc3BhY2VzIHRydWU7IGRldGVjdF9pbmRlbnRhdGlvbiBmYWxzZTsgdXNlX3RhYl9zdG9wcyB0cnVlOyAqLwovKiBrYXRlOiBzcGFjZS1pbmRlbnQgb247IGluZGVudC13aWR0aCAyOyAqLwo="},{"meta":{"name":"scale_image.css","url":"https://raw.githubusercontent.com/adsbypasser/adsbypasser/v5.73.0/css/scale_image.css","ts":1671066989333,"mimetype":"text/css"},"source":"I2Fkc2J5cGFzc2VyLWltYWdlLmFkc2J5cGFzc2VyLXJlc2l6YWJsZSB7CiAgY3Vyc29yOiAtd2Via2l0LXpvb20tb3V0OwogIGN1cnNvcjogLW1vei16b29tLW91dDsKICBjdXJzb3I6IHpvb20tb3V0Owp9CgojYWRzYnlwYXNzZXItaW1hZ2UuYWRzYnlwYXNzZXItcmVzaXphYmxlLmFkc2J5cGFzc2VyLXNocmlua2VkIHsKICBtYXgtd2lkdGg6IDEwMCU7CiAgbWF4LWhlaWdodDogMTAwJTsKICBjdXJzb3I6IC13ZWJraXQtem9vbS1pbjsKICBjdXJzb3I6IC1tb3otem9vbS1pbjsKICBjdXJzb3I6IHpvb20taW47Cn0KCi8qIHZpbTogc2V0IHRzPTIgc3RzPTIgc3c9MiBldCA6ICovCi8qIHN1YmxpbWU6IHRhYl9zaXplIDI7IHRyYW5zbGF0ZV90YWJzX3RvX3NwYWNlcyB0cnVlOyBkZXRlY3RfaW5kZW50YXRpb24gZmFsc2U7IHVzZV90YWJfc3RvcHMgdHJ1ZTsgKi8KLyoga2F0ZTogc3BhY2UtaW5kZW50IG9uOyBpbmRlbnQtd2lkdGggMjsgKi8K"},{"meta":{"name":"imagedoc-darknoise.png","url":"https://raw.githubusercontent.com/adsbypasser/adsbypasser/v5.73.0/img/imagedoc-darknoise.png","ts":1671066989333,"mimetype":"image/png"},"source":"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"}]},{"name":"YouTube - Ad Skip","options":{"check_for_updates":true,"comment":null,"compat_foreach":false,"compat_metadata":false,"compat_powerful_this":null,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":[],"orig_matches":["https://www.youtube.com/*"],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"sandbox":null,"tab_types":null,"unwrap":null},"storage":{"ts":1671066989336,"data":{}},"enabled":true,"position":4,"file_url":"https://greasyfork.org/scripts/40178-youtube-ad-skip/code/YouTube%20-%20Ad%20Skip.user.js","uuid":"b1ae57f5-d161-4ac6-a5e2-00e662b35098","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBZb3VUdWJlIC0gQWQgU2tpcAovLyBAdmVyc2lvbiAgICAgIDEuMAovLyBAZGVzY3JpcHRpb24gIFNraXBzIGFuZCByZW1vdmVzIGFkcyBvbiBZb3VUdWJlIGF1dG9tYXRpY2FsbHkKLy8gQGF1dGhvciAgICAgICBCb2JvY2F0bwovLyBAbWF0Y2ggICAgICAgIGh0dHBzOi8vd3d3LnlvdXR1YmUuY29tLyoKLy8gQGdyYW50ICAgICAgICBub25lCi8vIEBuYW1lc3BhY2UgaHR0cHM6Ly9ncmVhc3lmb3JrLm9yZy91c2Vycy8xNjcwODkKLy8gPT0vVXNlclNjcmlwdD09Cgpjb25zdCBlcXVhbFRleHQxID0gIlNraXAgQWRzIjsKY29uc3QgZXF1YWxUZXh0MiA9ICJTa2lwIEFkIjsKCmZ1bmN0aW9uIGFkZE5ld1N0eWxlKG5ld1N0eWxlKSB7CiAgICB2YXIgc3R5bGVFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3N0eWxlc19qcycpOwogICAgaWYgKCFzdHlsZUVsZW1lbnQpIHsKICAgICAgICBzdHlsZUVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpOwogICAgICAgIHN0eWxlRWxlbWVudC50eXBlID0gJ3RleHQvY3NzJzsKICAgICAgICBzdHlsZUVsZW1lbnQuaWQgPSAnc3R5bGVzX2pzJzsKICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaGVhZCcpWzBdLmFwcGVuZENoaWxkKHN0eWxlRWxlbWVudCk7CiAgICB9CiAgICBzdHlsZUVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUobmV3U3R5bGUpKTsKfQoKZnVuY3Rpb24gc2tpcEFkKCl7CiAgICBjb25zb2xlLmxvZygiVHJpZWQgdG8gc2tpcCBhIGFkIik7CiAgICBpZihkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCJ5dHAtYWQtc2tpcC1idXR0b24iKS5sZW5ndGggPiAwKXsKICAgICAgICBpZihkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCJ5dHAtYWQtc2tpcC1idXR0b24iKVswXS5jaGlsZE5vZGVzWzBdLnRleHRDb250ZW50ID09PSBlcXVhbFRleHQxIHx8IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoInl0cC1hZC1za2lwLWJ1dHRvbiIpWzBdLmNoaWxkTm9kZXNbMF0udGV4dENvbnRlbnQgPT09IGVxdWFsVGV4dDIpewogICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCJ5dHAtYWQtc2tpcC1idXR0b24iKVswXS5jbGljaygpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHNldFRpbWVvdXQoc2tpcEFkKCksIDEwMDApOwogICAgICAgIH0KICAgIH0KfQoKKGZ1bmN0aW9uKCkgewogICAgJ3VzZSBzdHJpY3QnOwogICAgYWRkTmV3U3R5bGUoJy55dHAtYWQtb3ZlcmxheS1zbG90IHtkaXNwbGF5Om5vbmUgIWltcG9ydGFudDt9Jyk7CiAgICBzZXRJbnRlcnZhbChmdW5jdGlvbiAoKXsKICAgICAgICBpZih3aW5kb3cubG9jYXRpb24uaHJlZi5zdWJzdHJpbmcoMCwzMCkgPT0gImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoPyIpewogICAgICAgICAgICBza2lwQWQoKTsKICAgICAgICB9CiAgICB9LCAyNTAwKTsKfSkoKTs="},{"name":"Bypass All Shortlinks","options":{"check_for_updates":true,"comment":null,"compat_foreach":false,"compat_metadata":false,"compat_powerful_this":null,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":["/^https:\\/\\/claimclicks\\.com\\/(btc|ltc|doge|trx|faucetlist|ptclist)/","/^https:\\/\\/claimercorner\\.xyz\\/(claimer\\/dashboard|claimer\\/advertise|claimer\\/ptc|claimer\\/deposit|claimer\\/transfer|claimer\\/tasks|claimer\\/offerwall|claimer\\/profile|claimer\\/auto|claimer\\/mining|claimer\\/wheel|claimer\\/login)/","/^https:\\/\\/cryptosats\\.net\\/(cryptosats\\/dashboard|cryptosats\\/advertise|cryptosats\\/ptc|cryptosats\\/deposit|cryptosats\\/transfer|cryptosats\\/tasks|cryptosats\\/offerwall|cryptosats\\/profile|cryptosats\\/auto|cryptosats\\/mining|cryptosats\\/wheel|cryptosats\\/login)/","/^https:\\/\\/99faucet|faucet.cempakajaya\\.com\\/(dashboard|advertise|ptc|deposit|transfer|tasks|offerwall|profile|auto|mining|dice|lottery|faucet|login)/","/^https:\\/\\/free.tribuncrypto\\.com\\/(dashboard|advertise|ptc|deposit|transfer|tasks|offerwall|profile|auto|mining|dice|lottery|faucet|login)/","*://*.vosan.co/"],"orig_includes":["/^(https?:\\/\\/)(tmearn|additionalgamer|makemoneywithurl|shrinkearn|techcyan|aghtas|soltoshindo|link4m|kingsleynyc|healthy4pepole|kiktu|1bitspace|skip-url|pennbookcenter|publicananker|mikl4forex|michaelemad|miklpro|zirof|forex-golds|nawahi1|mosqam|semawur|forex-trnd|hoshilink|taiwancnan|bit-url|megurus|cuts-url|popimed|rayusmedya|enburl|pickhopes|toryxlink|aduzz|lycoslink|cdrab|ibrabucks|zenshort|ethiomi|shortenbuddy|kiemlua|smoner|djbhojpurisongs|urlty|sakastau|modsbase|ac.totsugeki|bcvc2|earnwithshortlink|bitzite|link1s|diadiemcheckin|tudiendanhngon|chooyomi|staaker|lucidcam|forexlap|forexmab|linkjust|admediaflex|hoclamdaubep|rekonise|forex-articles|ponselharian|liinkat|thegoneapp|mobi2c|studyuo|hookeaudio|thehostingmentor|intlinki|linkshortify|shopsixseven|mohtawaa|msarzone|foodhear|fc-lc|expertvn|downphanmem|healdad|ez4mods|try2link|tmker|soft3arbi|techyadjectives|ex-foary|examtadka|bablyfeed|crypto4tun|blogmado|itsguider|btcwalk|99faucet|coin-free|1xfaucet|cafenau|techacode|ls2earn|sevenjournals|7misr4day|trflink|bclikeqt|youssefsayed|get4links|crickblaze|nostralink|clkmein|101desire|memangbau|sama-pro|s.ume24|shtfly|bestmobilenew|onlineincoms|modsfire|adneow|short.clickscoin|adclickersbot|mobitaak|modebaca|paylinnk|olhonagrana|chedrive|adrinolinks|samaa-pro|techrfour|ez4short|topnewsnew|gawishpro|dz4link|skincarie|gaminplay|infinitycoupon|videoslyrics|shortlite|bitefaucet|techrayzer|shorteet|donnaleehunt|puggygaming|tranquangchuan|blogginglass|1shorten|lensabicara|tieutietkiem|yummy-reciepes|doctor-groups|link.bigboxnet|bioinflu|chamcuuhoc|litexblog|7nything|ezeviral|gamalk-sehetk|adsafelink|cbshort|abcshort|checkscoin|llinkon|links.apksvip|nguyenvanbao|cloudgetlink|techloadz|atglinks|nulledsafe|dreamcheeky|cutpaid|fidlarmusic|rodjulian|anhdep24|money.alyoumeg|sl.claimfreebits|sl-1.btcbunch|sl-2.btcbunch|earncryptowrs|short-zero|insurancevela|poketoonworld|arahtekno|mopahealth|nghiencar|educur|sl-3.btcbunch|apk.miuiku|bitlya|ecwizon|oncehelp|sportsmediaz|big2short|techymozo|loptelink|2shrt|charexempire|coindoog|shotzon|novelsapps|webhostingpost|tremamnon|tirailangit|intercelestial|tribuntekno|bestcash2020|hoxiin|fooot-map|priefy|dz-linkk|fauxlink|chinhnhacoban|autodime|cortaly|link.3dmili|1adlink|indianshortner|donia-tech|donia2tech|donia2link|short1s|cr3zyblog|btafile|pdiskshortener|urlsopen|1shortlink|linkerload|filenext|shrinkmoney|doodshort|paid4link|kienthucrangmieng|wiki-topia|aljoodm98|newworldnew|sahityt|mkomsel|niinga|fx4vip|shortzon|mesho-link|up4cash|newsharsh|examkhata|linksht|note1s|teknosimple|discordserv|wikitraveltips|link-yz|apkadmin|ayelads|gawbne|mshortener|cutdomain|usersdrive|uptobox|1fichier|uploadrar|bayfiles|krakenfiles|post.copydev|icutlink|zegtrends|anonfiles|sharemods|ddownload|uppit|userscloud|newsnowbd|link.nulldown|asideway|url.namaidani|url.magmint|mp4upload|myshrinker|apkshrt|link.turkdown|drive.google|safe.intipanime|uploadhaven|manga2day|shortyearn|workupload|filedm|themorningtribune|beingtek|sub2get|ex-load|campki|social-unlock|teerclub|short-jambo|link.bitmagge|nerdiess|lyricsbaazaar|best-cpm|clicksfly|megaupto|maqal360|foodboth|ufacw|techcartz|softechbharat|okrzone|informaxonline|shopdorod|short.skalbayrak|adshnk|sub2unlock|smarcrm|cryptomeloud|blog-everything|ikrey|tipsli|urlpayout|urlpoints|hocbeauty|95news|link.get4llink|twitonet|shrinklo|xemsport|cutwin|pubgquotes|examsteacher|adpaylink|yxoshort|mdiskurl|shrt10|imgbsr|linknih|lessurl|pureshort|techkeshri|uploadsoon|shrinkgold|itechmafiia|link4earn|team.pastehosting|3rabsnews|hosting4lifetime|oyunfilmindir|tecnicalboy|mr-forex|leadcricket|freebrightsoft|bantenexis|tackaway|dr-forex|indiajobagency|dz4link1|xpshort|urlshortx)(\\.com)(\\/.*)/","/^(https?:\\/\\/)(.+)?(zolomix|cararegistrasi|5golink|birdurls|snkra|artiskini|sh2rt|byboe|medcpu|nousdecor|restorbio|bdnewsx|upshrink|gifans|jardima|jobswd|gkqnaexam|imperialstudy|ovlinks|imagenesderopaparaperros|yofaurls|digiromotion|wingifta|rancah|coinadfly|delishwell|zippyshare|solidfiles|ourtecads|zubatecno|covemarkets|disheye|eda-ah|blog-forall|techymedies|gamelopte|allcryptotips|claimclicks|snowurl|riadcrypto|askpaccosi|linktrims|gets4link|visflakes|apk4do|dineroshare|elwatanelyoum|ledifha|claimfey|panylink|wrbloggers|tokenoto|saly-cash|upload-4ever|shortenn|admediaflex|btcpany|assettoworld|vikashmewada|linkyearn|appsbull|gam3ah|tinybc|diudemy|hereofamily|file-upload|shorterall|tribuncrypto|cempakajaya|safelinkduit|nadersoft7|adshorturl|linkbnao|phsensei|4shared|ta2deem7arbya|lrshortner|tinycmd|cloudshrinker|proviralhost|technicalatg|v2links|ytsubme|rainurl|arahlink|m4cut|teachsansar|web9academy|shortxlinks|flyrar|pythondunyasi|meykmen|on-scroll|shrtfly|dash-free|sekilastekno|cutln|i-polls|sonicbtc|menjelajahi|almontsf|crypturls|zombiebtc|techwhom|cash4share|linkwards|nyawang|kongutoday|claimbtcbits)(\\.com)(\\/.*)/","/^(https?:\\/\\/)(ahyblogs|ourcoincash|1manga|watchdoge|arenaboard|ccsl|shrinkpay|adsgo|shon|crypto-faucet|bingeflix|studystar|lokagames|3vw|bflinks|short-cash2|wizzly|mgnet|crypteen|dogeen|fauceteen|cutdl|sportawy|fexkomin|technemo|zoomcrypto|techboyz|cblinks|99links|kartunik|post.nites-tv|shortplus|stores.filmyzilla-in|expresscoins|claimcoinsfree|short1|swzz|acortame|alghtas|wizly|horanews|a1link|short2fly|bcvc|healthbloog|post.movies-near-me|st.kleaco|playlink|q8c|uscity|cars-1year|nabits|welovecrypto|worldappsstore|0uq|sh.tripledownloader|short2url|zeroshort|bitsyield|egstar|playdisk|monsterurlshortner|gibit|studyis|kukslincs|magictoshi|satoshi-hunter)(\\.xyz)(\\/.*)/","/^(https?:\\/\\/)(.+)?(senuansatechno|insurglobal|claimercorner|shortly|dexlink|doctorcoin|speedynews|1apple|ffworld|textpage|fidovy|egfly|insurance-space|crypto-blog|sapica|earnfacut|urlbharat|dropz|chainfo|megano-coin|techleets|earnl|ajifly)(\\.xyz)(\\/.*)/","/^(https?:\\/\\/)(neonlink|techydino|world-trips|yoshare|lets.5get|crypto-fi|wpcheap|coinmasterx|catcut|aztravels|dulichkhanhhoa|sub2unlock|forex-gold|techtrickonline|7apple|ccurl|link1s|url.namaidani|cryptowidgets|dogeclick|adskip|hurirk|usfinf|xervoo|sport4you|hexupload|eloism|cutt|forexshare|blog.cryptowidgets|neexulro|dailyuploads|douploads|simfileshare|fir3|magybu|racaty|linegee|blogesque|thuocdangian|altblogger|letsboost|conghuongtu|vinaurl|tecmundo|try2link|cut-y|megadb|cpmlink)(\\.net)(\\/.*)/","/^(https?:\\/\\/)(.+)?(digitalnaz|owllink|mozlink|cryptosats|rocklinks|celinks|jiotech|bitcomarket|illink|jemari|paid4link|link3s|boscoin|linkrex|fire-link|urlw|pilinks|linkshortify|youshort)(\\.net)(\\/.*)/","/^(https?:\\/\\/)(tnlink|jrlinks|qualitystudymaterial|cuturl|missionhight|wpking|zagl|ls2earn|streamshort|shareus|referus|megafly|megaurl|cutp|earnmoj|riadshot|urlmoney|cplink|cryptomonitor|technoflip|linkshortify|htlinks|techlearningtube|urlfly|linkocean|financeflix|uttan|jazbaat|djxmaza|bildirim|techy4you|battlechamp|sahilsumra|kerdlinfo|urlcut|insurancevlog|itechlogic|videolyrics|tekcrypt|missionhight|gplinks|moddingzone|adybrands|gpflix|gz2|dulink|aclinks|hidelinks|shortearn|siteblog|u.apgy|du-link|ouoi|by6|adrinolinks|rklinks|mymobilehub|techdaze|link4earn|rupamobile|examsolution|earn4link|kalvidudes|techwithsanikant|thebookaholics|ctdbihar)(\\.in)(\\/.*)/","/^(https?:\\/\\/)(.+)?(cashurl|linkad|bitcoinly|crazyblog|zolomix|technologylover|expertlinks|largestpanel|linkres|rsrlink|linkstream|xmod|short2url|99links|rplinks|enit|adloot|url2go|tnvalue|pvidly|apurl|earnspace|urlinked|mdlink|gamerfang|writedroid|teckypress|fixno|paisakamalo|inkik|shrinkforearn|easysky|ajlinks|mdiskplayer|akcartoons|open2get)(\\.in)(\\/.*)?/","/^(https?:\\/\\/)(aylink|linkszia|mynewsmedia|gtlink|linksly|droplink|123link|linksfy|adshorti|hxfile|dosya|veganal|takem|ezimg|eng.ezimg|dausel|modlink|9-animie|veganho|nulledmod|veganac|dealprice|arabplus2|cut-y|adshort)(\\.co)(\\/.*)/","/^(https?:\\/\\/)(.+)?(takez|linksfire|vosan|tinygo|veganab|adfloz|fexkomin)(\\.co)(\\/.*)/","/^(https?:\\/\\/)(ctbl|girls-like|gobits|zoss|shrinke|tlin|terafly|petafly|gigafly|adnews|papanews|panyflay|mozzfly|shortus|short.croclix|best-news|mega-news|wildblog|specx|dddrive|linkpoi|m.newhit|mboost|linkshorts|exafly|nonofly|lozzfly|uptomega|stfly|adbull|youshort|health-and|cutx|adsk|linkfly|shorter.earn-hub|pkin|cashando)(\\.me)(\\/.*)/","/^(https?:\\/\\/)(.+)?(theconomy|richlink)(\\.me)(\\/.*)/","/^(https?:\\/\\/)(sitr|downfile|savelink|linkshortify|shareus|promo-visits|mobileprice|mynurse)(\\.site)(\\/.*)/","/^(https?:\\/\\/)(.+)?(cekip|link4rev|coin-city|urlcash)(\\.site)(\\/.*)/","/^(https?:\\/\\/)(earnme|sanoybonito|automotur|kooza|1link|zentum|mytop5|forexwaw|megatube)(\\.club)(\\/.*)/","/^(https?:\\/\\/)(.+)?(usanewstoday|kadal|webhostingtips)(\\.club)(\\/.*)/","/^(https?:\\/\\/)(adrev|paid4|yousm|coinpayz|tr|yocto|clk.dti|besturl|boostme|takefile|appo|pureshort|linkshortifyx)(\\.link)(\\/.*)/","/^(https?:\\/\\/)(.+)?(vshort|stex|cash4|zuba)(\\.link)(\\/.*)/","/^(https?:\\/\\/)(shurt|shortit|adsy|bitlinks|clik|playstore|megalink)(\\.pw)(\\/.*)/","/^(https?:\\/\\/)(.+)?(prz|pong)(\\.pw)(\\/.*)/","/^(https?:\\/\\/)(bloogerspoot|vsbl)(\\.ga)(\\/.*)/","/^(https?:\\/\\/)(bloogerspoot|linkshor|cortlink)(\\.tk)(\\/.*)/","/^(https?:\\/\\/)(.+)?(madfaucet|mineshor|futureshor)(\\.tk)(\\/.*)/","/^(https?:\\/\\/)(bloogerspoot|urlchanger|arearn|360shortlink)(\\.ml)(\\/.*)/","/^(https?:\\/\\/)(onimports|link.encurtaon|economiarelevante)(\\.com\\.br)(\\/.*)/","/^(https?:\\/\\/)(exee|onlineteori|punyablog|activity|massive|caview|nesiaku|link.nesia)(\\.my\\.id)(\\/.*)/","/^(https?:\\/\\/)(.+)?(mycut|apasih)(\\.my\\.id)(\\/.*)/","/^(https?:\\/\\/)(.+)?(suratresmi|carapedi|salink)(\\.id)(\\/.*)/","/^(https?:\\/\\/)(link.skm4u|linkwards)(\\.co\\.in)(\\/.*)/","/^(https?:\\/\\/)(.+)?(droplink)(\\.co\\.in)(\\/.*)/","/^(https?:\\/\\/)(kiiw|passgen|wordcounter|shrink|revcot|clickzu|shortzu)(\\.icu)(\\/.*)/","/^(https?:\\/\\/)(newforex|wplink|nbyts|wealthystyle|clicksfly|happy-living|webcoin.coinrain|teacherana|earnow|earn-cash|yourtechnology|apks|network-earn|battleroyal)(\\.online)(\\/.*)/","/^(https?:\\/\\/)(.+)?(adslinkfly|readi|linkmumet)(\\.online)(\\/.*)/","/^(https?:\\/\\/)(exey|ezlinks|techmody|ouo|ex-e|saly|cuty|evoload|oke|letsupload|eio|oii|exe)(\\.io)(\\/.*)/","/^(https?:\\/\\/)(.+)?(linkfly|usalink)(\\.io)(\\/.*)/","/^(https?:\\/\\/)(tny|tinyurl)(\\.so)(\\/.*)/","/^(https?:\\/\\/)(zshort|claimcrypto|cashearn|1ink|linkpay|moneylink|intnews|openload|linkspy|letsupload|myasietv)(\\.cc)(\\/.*)/","/^(https?:\\/\\/)(cryptoad|wikile|uploadev|mega4upr|cshort|payskip|homeairquality|shortearn|sl.btc25|earnsfly)(\\.org)(\\/.*)/","/^(https?:\\/\\/)(.+)?(medipost|shrinkurl|keeplinks|rajdlsg)(\\.org)(\\/.*)/","/^(https?:\\/\\/)(jameeltips|mitly|adfoc|link4fun)(\\.us)(\\/.*)/","/^(https?:\\/\\/)(.+)?(yalla-shoot-now|forexeen|jaelink)(\\.us)(\\/.*)/","/^(https?:\\/\\/)(noweconomy|deportealdia|adshort|ay|pngit|pndx)(\\.live)(\\/.*)/","/^(https?:\\/\\/)(earnads|genpassword|shrlink|mshort|punyamerk|shortnow|short.freeltc)(\\.top)(\\/.*)/","/^(https?:\\/\\/)(scratch247|siyn|portablesusb|children-learningreading|azmath|mobilereview|inform3tion|mobilism|shortlinkto|uptobhai|bitcrypto|machicon-akihabara|cooklike|videoclip|brbushare|fanclup)(\\.info)(\\/.*)/","/^(https?:\\/\\/)(faucetcrypto|bildirim)(\\.eu)(\\/.*)/","/^(https?:\\/\\/)(nex-url|olamovies|atrologyrex)(\\.cyou)(\\/.*)/","/^(https?:\\/\\/)(antonimos|blog.hostratgeber)(\\.de)(\\/.*)/","/^(https?:\\/\\/)(freelitecoin|uplinkto|1Link)(\\.vip)(\\/.*)/","/^(https?:\\/\\/)(.+)?(flyad|lootcash)(\\.vip)(\\/.*)/","/^(https?:\\/\\/)(romania|met|warp)(\\.bz)(\\/.*)/","/^(https?:\\/\\/)(2ad|viya|17o)(\\.ir)(\\/.*)/","/^(https?:\\/\\/)(adshrink|cutin)(\\.it)(\\/.*)/","/^(https?:\\/\\/)(pingit|files|upo)(\\.im)(\\/.*)/","/^(https?:\\/\\/)(clk|9xupload)(\\.asia)(\\/.*)/","/^(https?:\\/\\/)(iir|tei|ier|ckk)(\\.ai)(\\/.*)/","/^(https?:\\/\\/)(aii|clk|oko)(\\.sh)(\\/.*)/","/^(https?:\\/\\/)(.+)?(i8l|clk|pi-l|bcvc|modli)(\\.ink)(\\/.*)/","/^(https?:\\/\\/)(.+)?(upload|prx)(\\.ee)(\\/.*)/","/^(https?:\\/\\/)(.+)?(mirrored|clicknupload)(\\.to)(\\/.*)/","/^(https?:\\/\\/)(.+)?(ouo|forextrader|daga88)(\\.today)(\\/.*)/","/^(https?:\\/\\/)(.+)?(techgeek|adsgo)(\\.digital)(\\/.*)/","/^(https?:\\/\\/)(mhma12|surflink|techtrim)(\\.tech)(\\/.*)/","/^(https?:\\/\\/)(kiw|redir.123file)(\\.li)(\\/.*)/","/^(https?:\\/\\/)(fc|fcc)(\\.lc)(\\/.*)/","/^(https?:\\/\\/)(zonearn|theprice|nhacremix|doanvanhai|hynews)(\\.biz)(\\/.*)/","/^(https?:\\/\\/)(.+)?(123link)(\\.biz)(\\/.*)/","/^(https?:\\/\\/)(.+)?(exe|exee|exep|exeo|upfiles|cutty|linkfly)(\\.app)(\\/.*)/","/^(https?:\\/\\/)(adshort|1bit|2the|careerhunter|galaxy-link)(\\.space)(\\/.*)/","/^(https?:\\/\\/)(makeeasybtc|softindex|techus)(\\.website)(\\/.*)/","/^(https?:\\/\\/)(linka|xtrabits|skipads)(\\.click)(\\/.*)/","/^(https?:\\/\\/)(.+)?(shortlinks|easysl|adlink|adzilla|urlcash)(\\.click)(\\/.*)/","/^(https?:\\/\\/)(.+)?(hamody|nathanaeldan|freddyoctavio|davisonbarker|clks|cryptosh|bestfonts|gitlink|openurl)(\\.pro)(\\/.*)/","/^(https?:\\/\\/)(up-load|zcash|mdisk)(\\.one)(\\/.*)/","/^(https?:\\/\\/)(1dogecoin|faucet)(\\.work)(\\/.*)/","/^(https?:\\/\\/)(claim|chuksblog|pricenews|url.getbits)(\\.fun)(\\/.*)/","/^(https?:\\/\\/)(go|blog|go2|tech|test|blg)(\\.madshiba\\.fun)(\\/.*)/","/^(https?:\\/\\/)(linkati|zenshort|curto)(\\.win)(\\/.*)/","/^(https?:\\/\\/)(cool-time|movies|anime|tech)(\\.dutchycorp\\.space)(\\/.*)/","/^https:\\/\\/linkvertise\\.com\\/(1|2|3|4|5|6|7|8|9)/","/^https:\\/\\/cryptofans\\.club\\/(short|next|other|step)/","/^(https?:\\/\\/)(.+)?(mediafire)(\\.com)\\/(download|file)/","/^(https?:\\/\\/)(.+)?(cryptocurrencytracker|freefaucet)(\\.biz)\\/(link)/","/^(https?:\\/\\/)(.+)?(freebitcoin)(\\.fun)\\/(topsites|view)/","/^(https?:\\/\\/)(.+)?(clickscoin|freefeyorra|reddcoineveryday|cryptotyphoon|softairbay)(\\.com)\\/(short)/"],"orig_matches":["*://dutchycorp.space/s*/*","*://dutchycorp.ovh/s*/*","*://shorts.lu/*","*://adx.wiki/*","*://adx.cx/*","*://al.ly/*","*://za.gl/*","*://goo.st/*","*://c2g.at/*","*://adz.moe/*","*://coin.mg/*","*://send.cm/*","*://kimo.ma/*","*://goads.ly/*","*://mdn.rest/*","*://*.mdn.lol/*","*://*.rota.cc/*","*://ouo.press/*","*://7cc.96.lt/*","*://gktech.uk/*","*://*.flyzu.icu/*","*://tinyurl.is/*","*://*.mdn.world/*","*://nail.edu.pl/*","*://lolabits.se/*","*://gosixs.com/s/*","*://3shorturl.gq/*","*://litecoin.host/*","*://*.goto.com.np/*","*://z-cash.xyz/ad/*","*://drop.download/*","*://cryptofuns.ru/*","*://linkshrink.ca/*","*://short.express/*","*://arbweb.info/sl/*","*://*.cizgifilm.tv/*","*://karyawan.co.id/*","*://downloads.ninja/*","*://faucethub.ly/hs/*","*://faucetpay.io/ptc*","*://*.trangchu.news/*","*://webmobile.store/*","*://*.adz7short.space/*","*://docs.google.com/uc*","*://starfaucet.net/sl/*","*://solarchaine.com/sl/*","*://shrt.cryptofuns.ru/*","*://iqfaucet.com/link3/*","*://horrorbitcoin.com/?*","*://satoshi-win.xyz/url/*","*://cryptonetos.ru/page/*","*://*.writedroid.eu.org/*","*://post.blogzone1.shop/*","*://faucet.gold/BTC/?step*","*://faucet.gold/ETH/?step*","*://adbtc.top/surf/browse/*","*://anonym.ninja/download/*","*://claimsolana.xyz/short/*","*://faucetcrypto.net/short/*","*://stationbit.xyz/autolink/*","*://konstantinova.net/verify/*","*://playnano.online/watch-and*","*://adbtc.top/surfiat/browse/*","*://rotator.nurul-huda.sch.id/*","*://*api-secure.solvemedia.com/*","*://faucetcrypto.com/claim/step/*","*://linkvertise.download/download/*","*://*.racedepartment.com/downloads/*","*://cryptonetos.ru/page/redirect*","*://galerybits.com/protectlink/*","*://earnultimate.space/short/*","*://bas.nurul-huda.or.id/*"],"orig_noframes":null,"orig_run_at":"document-start","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"sandbox":null,"tab_types":null,"unwrap":null},"storage":{"ts":1671066989336,"data":{}},"enabled":true,"position":5,"file_url":"https://greasyfork.org/scripts/431691-bypass-all-shortlinks/code/Bypass%20All%20Shortlinks.user.js","uuid":"0eb477bd-a4b4-49bf-9afe-0b3afccbd603","source":""},{"name":"adLBypasser [v1.6] || Ouo.Io, Uii.Io, Exe.Io, Bc.Vc, Adf.Ly & More ✔ NO ADS","options":{"check_for_updates":true,"comment":null,"compat_foreach":false,"compat_metadata":false,"compat_powerful_this":null,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":[],"orig_matches":["*://*.ouo.io/*","*://*.ouo.press/*","*://*.uii.io/*","*://*.passgen.icu/*","*://*.wordcounter.icu/*","*://*.exe.io/*","*://*.exey.io/*","*://*.exey.app/*","*://*.bc.vc/*","*://*.bcvc.live/*","*://*.bcvc.xyz/*","*://*.ouo.today/*","*://*.doaipomer.com/*","*://*.adf.ly/*","*://*.hurirk.net/*","*://*.usfinf.net/*","*://*.xervoo.net/*","*://*.pro/*","*://*.met.bz/*","*://*.shrinkearn.com/*","*://*.tei.ai/*","*://*.makemoneywithurl.com/*","*://*.clk.sh/*","*://*.iir.ai/*","*://*.shrink.pe/*","*://*.aii.sh/*","*://*.shrtfly.com/*","*://*.stfly.me/*","*://*.nbyts.online/*","*://*.shrinkurl.org/*","*://*.shrinkme.io/*","*://*.shrinke.me/*","*://*.smoner.com/*","*://*.shortearn.eu/*","*://*.adfoc.us/*","*://*.fc.lc/*","*://*.fc-lc.com/*","*://*.tr.link/*","*://*.aylink.co/*","*://*.yindex.xyz/*","*://*.gitizle.vip/*","*://*.uzunversiyon.xyz/*","*://*.shtms.co/*","*://*.findi.pro/*","*://*.gitlink.pro/*","*://*.bildirim.eu/*","*://*.bildirim.in/*","*://*.ppcnt.net/*","*://*.pnd.tl/*","*://*.pnd.one/*","*://*.pnd.money/*","*://*.pnd.fyi/*","*://*.pndx.live/*","*://*.shr.cash/*","*://*.acn.vin/*","*://*.pubiza.com/*","*://*.lnk.parts/*","*://*.lnkparts.com/*","*://*.zunsoach.com/*","*://*.urlcik.com/*","*://*.recaptcha.net/recaptcha/*","*://*.google.com/recaptcha/*"],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"sandbox":null,"tab_types":null,"unwrap":null},"storage":{"ts":1671066989340,"data":{}},"enabled":true,"position":6,"file_url":"https://greasyfork.org/scripts/439469-adlbypasser-v1-6-ouo-io-uii-io-exe-io-bc-vc-adf-ly-more-no-ads/code/adLBypasser%20%5Bv16%5D%20%7C%7C%20OuoIo,%20UiiIo,%20ExeIo,%20BcVc,%20AdfLy%20%20More%20%E2%9C%94%20NO%20ADS.user.js","uuid":"321ab533-de0e-4aa7-a890-c64721b51978","source":"","requires":[{"meta":{"name":"jquery-3.6.0.min.js","url":"https://code.jquery.com/jquery-3.6.0.min.js","ts":1671066989338,"mimetype":"text/javascript"},"source":""}]},{"name":"YouTube评论翻译按钮","options":{"check_for_updates":true,"comment":null,"compat_foreach":false,"compat_metadata":false,"compat_powerful_this":null,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":[],"orig_matches":["*://www.youtube.com/*","*://www.youtube.com/watch*"],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"sandbox":null,"tab_types":null,"unwrap":null},"storage":{"ts":1671066989341,"data":{}},"enabled":true,"position":7,"file_url":"https://greasyfork.org/scripts/456108-youtube%E8%AF%84%E8%AE%BA%E7%BF%BB%E8%AF%91%E6%8C%89%E9%92%AE/code/YouTube%E8%AF%84%E8%AE%BA%E7%BF%BB%E8%AF%91%E6%8C%89%E9%92%AE.user.js","uuid":"d768c0f6-5e83-409c-a9fa-75d43f8cec09","source":""},{"name":"Anti-Adblock Killer | Reek","options":{"check_for_updates":true,"comment":null,"compat_foreach":false,"compat_metadata":false,"compat_powerful_this":null,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":["*"],"orig_excludes":[],"orig_includes":["http://*/*","https://*/*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-start","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"sandbox":null,"tab_types":null,"unwrap":null},"storage":{"ts":1671366792707,"data":{"nextchecklist":"s1671453192707","nextcheckupdate":"s1671614451932"}},"enabled":true,"position":8,"file_url":"https://raw.githubusercontent.com/reek/anti-adblock-killer/master/anti-adblock-killer.user.js","uuid":"87112a33-e253-41c7-9af6-c3ce8d2a3bd4","source":""},{"name":"addlessphotopea","options":{"check_for_updates":true,"comment":null,"compat_foreach":false,"compat_metadata":false,"compat_powerful_this":null,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":[],"orig_matches":["https://www.photopea.com/*"],"orig_noframes":null,"orig_run_at":"document-end","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"sandbox":null,"tab_types":null,"unwrap":null},"storage":{"ts":1671066989341,"data":{}},"enabled":true,"position":9,"file_url":"https://greasyfork.org/scripts/389215-addlessphotopea/code/addlessphotopea.user.js","uuid":"097879ae-1065-425f-884a-383892b7bcb2","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBhZGRsZXNzcGhvdG9wZWEKLy8gQG5hbWVzcGFjZSAgICBodHRwOi8vdGFtcGVybW9ua2V5Lm5ldC8KLy8gQHZlcnNpb24gICAgICAwLjIKLy8gQGRlc2NyaXB0aW9uICBBZGRsZXNzIFBob3RvcGVhIG9ubHkgZm9yIHlvdSEKLy8gQGF1dGhvciAgICAgICBZb3UKLy8gQG1hdGNoICAgICAgICBodHRwczovL3d3dy5waG90b3BlYS5jb20vKgovLyBAZ3JhbnQgICAgICAgIG5vbmUKLy8gQHJ1bi1hdCAgICAgICBkb2N1bWVudC1lbmQKLy8gPT0vVXNlclNjcmlwdD09Cgp2YXIgYmFyOwoKZnVuY3Rpb24gZ2V0QmFyKCkgewogICAgaWYgKGJhcikgewogICAgICAgIHJldHVybiBiYXI7CiAgICB9OwogICAgYmFyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnBhbmVsYmxvY2subWFpbmJsb2NrIC5ibG9jayAucGFuZWxoZWFkJyk7Cn0KCmZ1bmN0aW9uIGdldEJhck1heFdpdGR0aCgpIHsKICAgIGdldEJhcigpOwogICAgcmV0dXJuIGJhci5zdHlsZS5tYXhXaWR0aDsKfQoKZnVuY3Rpb24gc2V0QmFyTWF4V2l0ZHRoKHZhbHVlKSB7CiAgICBnZXRCYXIoKTsKICAgIGJhci5zdHlsZS5tYXhXaWR0aCA9IHZhbHVlOwp9CgooZnVuY3Rpb24gKCkgewogICAgJ3VzZSBzdHJpY3QnOwogICAgdmFyIGFkZHJlbW92ZXIgPSBzZXRJbnRlcnZhbCgoKSA9PiB7CiAgICAgICAgdmFyIG1haW5TZWN0aW9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmZsZXhyb3cucGhvdG9wZWEnKS5jaGlsZE5vZGVzOwogICAgICAgIHZhciBtYWlucGFydCA9IG1haW5TZWN0aW9uWzBdOwogICAgICAgIHZhciBhZGRwYXJ0ID0gbWFpblNlY3Rpb25bMV07CiAgICAgICAgaWYgKGFkZHBhcnQpIHsKICAgICAgICAgICAgYWRkcGFydC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnOwogICAgICAgICAgICBtYWlucGFydC5zdHlsZS53aWR0aCA9ICcxMDAlJzsKICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnBhbmVsYmxvY2subWFpbmJsb2NrJykuc3R5bGUud2lkdGggPSAnMTAwJSc7CiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdKb2IgZG9uZSwgc2NyaXB0IHF1aXQuJykKICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChhZGRyZW1vdmVyKTsKICAgICAgICB9CiAgICB9LCAxMDApOwoKICAgIHNldEludGVydmFsKCgpID0+IHsKICAgICAgICBpZiAoZ2V0QmFyTWF4V2l0ZHRoKCkgIT09ICcxMDAlJykgewogICAgICAgICAgICBzZXRCYXJNYXhXaXRkdGgoJzEwMCUnKTsKICAgICAgICB9CiAgICB9LCAxMDApCn0pKCk7Cg=="},{"name":"Photopea.com - Insomniac Dark","options":{"check_for_updates":true,"comment":null,"compat_foreach":false,"compat_metadata":false,"compat_powerful_this":null,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":["http://photopea.com/*","https://photopea.com/*","http://*.photopea.com/*","https://*.photopea.com/*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-start","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"sandbox":null,"tab_types":null,"unwrap":null},"storage":{"ts":1671066989342,"data":{}},"enabled":true,"position":10,"file_url":"https://userstyles.org/styles/userjs/172315/photopea-com-insomniac-dark.user.js","uuid":"33f141d8-6b82-41f8-ba75-8c0c18e92005","source":""}]}